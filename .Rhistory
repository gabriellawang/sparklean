pts[!pts$id %in% fdom$j & pts$id %in% fdom$i, "col"] <- "yellow"
pts <- pts[pts$col != "green",]
# Affichage points and segments
if(add == FALSE){
spdf <- spTransform(spdf, CRS("+proj=longlat"))
map <<- addPolygons(map,data=spdf,weight=1,col = 'blue',opacity = 1, group = "Basemap",
fill = TRUE, fillColor = 'blue', fillOpacity = 0.5)
}
internal <- diag(original)
internal_flow <- data.frame(internal)
name <- row.names(internal_flow)
internal_flow <- data.frame(name, internal)
pts <- merge(pts, internal_flow, by.x = "id", by.y = "name", all.x = T)
map <<- addCircles(map, lng = pts$long, lat = pts$lat,radius = pts$cex*80000,
fill = TRUE, fillColor = pts$col, color = "grey50", weight = 0.5,
fillOpacity = 0.8, opacity = 1, group = "Points",
label = paste("External flow:",pts$var, "\n Internal flow:",pts$internal, sep = " "),
highlightOptions = highlightOptions(color = "white", weight = 1.5,
bringToFront = FALSE))
begin.coord <- data.frame(lon=fdom$longi, lat=fdom$lati)
end.coord <- data.frame(lon=fdom$longj, lat=fdom$latj)
p <- psp(begin.coord[,1], begin.coord[,2], end.coord[,1], end.coord[,2],     owin(range(c(begin.coord[,1], end.coord[,1])), range(c(begin.coord[,2], end.coord[,2]))))
#width <<- data.frame(x=fdom$width)
sl <<- as(p, "SpatialLines")
map <<- addPolylines(map, data=sl,weight = fdom$width,col='black', opacity = 1, group = "Segments",
label = paste("Flow Intensity:", fdom$fij),
highlightOptions = highlightOptions(color = "white",
bringToFront = FALSE))
#width <<- data.frame(x=fdom$width)
#l <- vector("list", nrow(begin.coord))
#for (i in seq_along(l)) {
#  sl <<-Line(rbind(begin.coord[i, ], end.coord[i,]))
#  map <<- addPolylines(map, data=sl, weight=width[i,],col='black', opacity = 1, group = "Segments",
#                       label = paste("Flow Intensity:", as.character(width[i,])),
#                       highlightOptions = highlightOptions(color = "white", weight = width[i,],
#                                                           bringToFront = FALSE))
#}
map <<- addLegend(map, position = "bottomleft",
title = "Size proportional\nto sum of inflows",
colors = c("red","orange", "yellow"), opacity = 1,
labels = c("Dominant", "Intermediary",
"Dominated"))
map <<- addLayersControl(map, baseGroups = c("OSM (default)"),
overlayGroups = c("Points", "Segments", "Basemap"),
options = layersControlOptions(collapsed = FALSE))
}
map <<- leaflet() %>% setView(lng = 103.8517, lat = 1.2908, zoom = 11) %>% addTiles(group = "OSM (default)")
map <<- addPolygons(map,data=plan_area_sdf,weight=1,col = 'blue',opacity = 1,
fill = TRUE, fillColor = 'blue', fillOpacity = 0.5,
label = paste(plan_area_sdf$PLN_AREA_N, plan_area_sdf$OBJECTID),
group = "Basemap",
highlightOptions = highlightOptions(color = "white", weight = 1.5,
bringToFront = FALSE))
plotMapDomFlows2(mat = flowSel, spdf = plan_area_sdf, spdfid = "OBJECTID", w = inflows, wid = "id",
wvar = "w", wcex = 0.05, add = TRUE,
legend.flows.pos = "topright",
legend.flows.title = "Nb. of commuters")
map
source('~/Desktop/BUS_DATA/leaflet.R')
runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
? or
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
?plotlyOutput
?box
?plotlyOutput
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
?plotlyOutput
?plot_ly
?layout
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
map
map %>% addProviderTiles(providers$Esri.WorldImagery,)
runApp('Documents/IS415-Project')
install.packages(c("DBI", "Matrix", "REAT", "Rcpp", "V8", "XML", "cluster", "curl", "expm", "goftest", "lattice", "maptools", "mgcv", "nlme", "polyclip", "readr", "rgdal", "rgeos", "rmapshaper", "rmarkdown", "shiny", "sourcetools", "spatstat", "spdep", "stringi", "survival", "tibble"))
install.packages(c("DBI", "Matrix", "REAT", "Rcpp", "V8", "XML", "cluster", "curl", "expm", "goftest", "lattice", "maptools", "mgcv", "nlme", "polyclip", "readr", "rgdal", "rgeos", "rmapshaper", "rmarkdown", "shiny", "sourcetools", "spatstat", "spdep", "stringi", "survival", "tibble"))
install.packages(c("DBI", "Matrix", "REAT", "Rcpp", "V8", "XML", "cluster", "curl", "expm", "goftest", "lattice", "maptools", "mgcv", "nlme", "polyclip", "readr", "rgdal", "rgeos", "rmapshaper", "rmarkdown", "shiny", "sourcetools", "spatstat", "spdep", "stringi", "survival", "tibble"))
install.packages("rsconnect")
rsconnect::setAccountInfo(name='bus-rider-flow',
token='898ED7A40A7CEE38FCDCB6F27175B951',
secret='so7Sr5vRmmdqdH07s6Z0fGPhWI6GsvAfFB1Y7W7Q')
library(rsconnect)
rsconnect::deployApp('p/Users/shuweiwang/Documents/IS415-Project')
rsconnect::deployApp('/Users/shuweiwang/Documents/IS415-Project')
rsconnect::showLogs()
shiny::runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
map
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
View(pts)
View(inflows)
View(plan_area_sdf2)
View(sub_zone_sdf2)
?names
names(plan_area_sdf2@data)
?contains
contains("PLAN_AREA_N",vars = names(spdf))
contains("PLAN_AREA_N",vars = names(plan_area_sdf2@data))
namelist <- names(plan_area_sdf2@data)
result <- contains("PLN_AREA_N",namelist)
result <- contains("PLN_AREA_N",TRUE, namelist)
result
result <- contains("SUBZONE_N",TRUE, namelist)
result
area_name <- plan_area_sdf2$OBJECTID
area_name <- data.frame(plan_area_sdf2$OBJECTID, plan_area_sdf2$PLN_AREA_N)
View(area_name)
?data.frame
area_name <- data.frame(plan_area_sdf2$OBJECTID, "OBJECTID", plan_area_sdf2$PLN_AREA_N, "AREA_N")
View(area_name)
area_name <- data.frame(plan_area_sdf2$OBJECTID, plan_area_sdf2$PLN_AREA_N)
?rename
rename(area_name,c("OBJECTID","AREA_N"))
rename(area_name,c("plan_area_sdf2.OBJECTID"="OBJECTID","plan_area_sdf2.PLN_AREA_N"="AREA_N"))
plyr::rename(area_name,c("plan_area_sdf2.OBJECTID"="OBJECTID","plan_area_sdf2.PLN_AREA_N"="AREA_N"))
area_name <- plyr::rename(area_name,c("plan_area_sdf2.OBJECTID"="OBJECTID","plan_area_sdf2.PLN_AREA_N"="AREA_N"))
runApp('Documents/IS415-Project')
?contains
runApp('Documents/IS415-Project')
View(pts)
total <- pts$var+pts$internal
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
View(pts)
?row.nameas
?row.names
internal
View(internal)
?row.names.data.frame
internal@data
runApp('Documents/IS415-Project')
View(pts)
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
View(pts)
View(total_flow)
runApp('Documents/IS415-Project')
View(pts)
View(pts)
p <- plot_ly(pts, x = ~AREA_N, y = ~var, type = 'bar', name = 'In-flow')
p <- plot_ly(pts, x = ~AREA_N, y = ~var, type = 'bar', name = 'In-flow', marker = list(color = 'rgb(55, 83, 109)')) %>%
add_trace(y = ~internal, name = 'Internal flow', marker = list(color = 'rgb(26, 118, 255)')) %>%
add_trace(y = ~total, name = 'Total flow', marker = list(color = 'rgb(49,130,189)')) %>%
layout(title = 'Plan Area Flow Stats',
xaxis = list(
title = "",
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
yaxis = list(
title = 'Number of Flows',
titlefont = list(
size = 16,
color = 'rgb(107, 107, 107)'),
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
legend = list(x = 0, y = 1, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),
barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p
summary(pts)
pta
pts
pts <- as.data.frame(pts, stringsAsFactors = FALSE)
layout(title = 'Plan Area Flow Stats',
xaxis = list(
title = "",
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
yaxis = list(
title = 'Number of Flows',
titlefont = list(
size = 16,
color = 'rgb(107, 107, 107)'),
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
legend = list(x = 0, y = 1, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),
barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p <- plot_ly(pts, x = ~AREA_N, y = ~var, type = 'bar', name = 'In-flow', marker = list(color = 'rgb(55, 83, 109)')) %>% add_trace(y = ~internal, name = 'Internal flow', marker = list(color = 'rgb(26, 118, 255)')) %>% add_trace(y = ~total, name = 'Total flow', marker = list(color = 'rgb(49,130,189)')) %>%layout(title = 'Plan Area Flow Stats', xaxis = list(title = "",tickfont = list(size = 14,color = 'rgb(107, 107, 107)')),yaxis = list(title = 'Number of Flows', titlefont = list(size = 16,color = 'rgb(107, 107, 107)'),tickfont = list(size = 14, color = 'rgb(107, 107, 107)')), legend = list(x = 0, y = 1, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'), barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p
runApp('Documents/IS415-Project')
p
runApp('Documents/IS415-Project')
p <- plot_ly(pts, x = ~AREA_N, y = ~var, type = 'bar', name = 'In-flow', marker = list(color = 'rgb(55, 83, 109)')) %>% add_trace(y = ~internal, name = 'Internal flow', marker = list(color = 'rgb(26, 118, 255)')) %>% add_trace(y = ~total, name = 'Total flow', marker = list(color = 'rgb(49,130,189)')) %>%layout(title = 'Plan Area Flow Stats', xaxis = list(title = "",tickfont = list(size = 14,color = 'rgb(107, 107, 107)')),yaxis = list(title = 'Number of Flows', titlefont = list(size = 16,color = 'rgb(107, 107, 107)'),tickfont = list(size = 14, color = 'rgb(107, 107, 107)')), legend = list(x = 0, y = 1, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'), barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p
p
View(total_flow)
pts$AREA_N
data.frame(pts$AREA_N, stringsAsFactors = FALSE)
temp <- data.frame(pts$AREA_N, stringsAsFactors = FALSE)
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
map
?time
time()
date()
temp=date()
temp <= temp[1]
temp <- temp[1]
temp
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
View(apple)
runApp('Documents/IS415-Project')
View(apple)
View(original_data)
View(processed_data)
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
View(apple)
View(orange)
View(processed_data)
runApp('Documents/IS415-Project')
View(original_data)
View(processed_data)
runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
shiny::runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
runApp('Documents/IS415-Project')
data <- read.table("welch-t-test.csv", header=TRUE, sep=",")
data <- read.table("/Users/shuweiwang/Downloads/welch-t-test.csv", header=TRUE, sep=",")
View(data)
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- t.test(data1, data2, paired=FALSE, alternative="two.sided", var.equal=FALSE)
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("t = ", result["statistic"][[1]], "\n")
cat("df = ", result["parameter"][[1]], "\n")
cat("p = ", result["p.value"][[1]], "\n")
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest.csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- t.test(data1, data2, paired=FALSE, alternative="two.sided", var.equal=FALSE)
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("t = ", result["statistic"][[1]], "\n")
cat("df = ", result["parameter"][[1]], "\n")
cat("p = ", result["p.value"][[1]], "\n")
clc
clr
clear
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest(scale).csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- t.test(data1, data2, paired=FALSE, alternative="two.sided", var.equal=FALSE)
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("t = ", result["statistic"][[1]], "\n")
cat("df = ", result["parameter"][[1]], "\n")
cat("p = ", result["p.value"][[1]], "\n")
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/mann-whitney-u.csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
~")
~")
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/mann-whitney-u.csv", header=TRUE, sep=",")
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest.csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- wilcox.test(data1, data2, paired=FALSE, alternative="two.sided")
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("p = ", result["p.value"][[1]], "(approximated if you see a warning below)\n")
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest.csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- wilcox.test(data1, data2, paired=FALSE, alternative="two.sided")
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("p = ", result["p.value"][[1]], "(approximated if you see a warning below)\n")
library(plotly)
install.packages("plotly")
install.packages("plotly")
library(plotly)
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest.csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
data1
name1
p <- plot_ly(y=data1, type="box")
p
p <- plot_ly(y=data1, type=box)%>%
add_trace(y=data2)
p
p
p1 <- plot_ly(y=data1, type=box)
p1
p2 <- plot_ly(y=data2, type=box)
p2
p2
p1
p1 <- plot_ly(y=data1, type="box")%>%
add_trace(y=data2)
p1
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest(scale).csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- wilcox.test(data1, data2, paired=FALSE, alternative="two.sided")
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("p = ", result["p.value"][[1]], "(approximated if you see a warning below)\n")
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest(scale).csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- wilcox.test(data1, data2, paired=FALSE, alternative="two.sided")
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("p = ", result["p.value"][[1]], "(approximated if you see a warning below)\n")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest.csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- wilcox.test(data1, data2, paired=FALSE, alternative="two.sided")
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("p = ", result["p.value"][[1]], "(approximated if you see a warning below)\n")
packages <- c("data.table", "shiny", "plotly", "shinydashboard", "jsonlite")
shiny::runApp('Desktop/sparklean-dashboard/sparklean')
