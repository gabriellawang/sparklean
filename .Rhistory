p
p <- plot_ly(y=data1, type=box)%>%
add_trace(y=data2)
p
p
p1 <- plot_ly(y=data1, type=box)
p1
p2 <- plot_ly(y=data2, type=box)
p2
p2
p1
p1 <- plot_ly(y=data1, type="box")%>%
add_trace(y=data2)
p1
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest(scale).csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- wilcox.test(data1, data2, paired=FALSE, alternative="two.sided")
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("p = ", result["p.value"][[1]], "(approximated if you see a warning below)\n")
setwd("~")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest(scale).csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- wilcox.test(data1, data2, paired=FALSE, alternative="two.sided")
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("p = ", result["p.value"][[1]], "(approximated if you see a warning below)\n")
data <- read.table("/Users/shuweiwang/Desktop/ABTest/ABTest.csv", header=TRUE, sep=",")
data1 <- as.matrix(data)[,1]
name1 <- names(data)[1]
data2 <- as.matrix(data)[,2]
name2 <- names(data)[2]
cat("Comparing means for non-normally distributed data from between-subjects experiment\n")
cat("with two conditions (\"", name1, "\" and \"", name2, "\").\n\n", sep="")
means <- sapply(data, mean, na.rm=TRUE)
cat("Means:", name1, means[1], ",", name2, means[2], "\n")
sds <- sapply(data, sd, na.rm=TRUE)
cat("Standard Deviations:", name1, sds[1], ",", name2, sds[2], "\n\n")
hname1 <- paste("Histogram of ", name1, ".png", sep="")
png(hname1)
hist(data1, main=paste("Histogram of", name1), xlab=name1)
dev.off()
hname2 <- paste("Histogram of ", name2, ".png", sep="")
png(hname2)
hist(data2, main=paste("Histogram of", name2), xlab=name2)
dev.off()
cat("Histograms written to \"", hname1, "\" and \"", hname2, "\".\n\n", sep="")
result <- wilcox.test(data1, data2, paired=FALSE, alternative="two.sided")
cat("Results of ", result["method"][[1]], " (", result["alternative"][[1]], ")\n", sep="")
cat("p = ", result["p.value"][[1]], "(approximated if you see a warning below)\n")
packages <- c("data.table", "shiny", "plotly", "shinydashboard", "jsonlite")
date1 <- Sys.Date()
date1
time <- c(date, "00:00:00")
time
time <- c(date[1], "00:00:00")
date
time <- c(date1[1], "00:00:00")
time
date1
time <- cbind(date1, "00:00:00")
time
as.character.Date(date1)
date1 <- as.character.Date(date1)
date1
time <- cbind(date1, "00:00:00")
time
date1
a="a"
b="b"
a+b
cbind(a,b)
time <- paste(date1, "00:00:00")
time
date1 <- Sys.Date()
time <- paste(date1, "00:00:00")
time
date <- Sys.Date()
time1 <- paste(date, "00:00:00")
time2 <- paste(date, "23:59:59")
strptime(time1, "%Y-%m-%d %H:%M:%S")
as.numeric(time1)
as.numeric(as.Date(time1))
as.numeric(as.POSIXct(time1))
time1 <- paste(date, "00:00:00.000")
time2 <- paste(date, "23:59:59.000")
as.numeric(as.POSIXct(time1))
as.numeric(as.POSIXct(time2))
time1 <- paste(date, "00:00:00")
time2 <- paste(date, "23:59:59")
as.numeric(as.POSIXct(time1))*1000
as.Date(as.numeric(as.POSIXct(time1))*1000)
time1 <- paste(date, "00:00:00 GMT+0800")
time2 <- paste(date, "23:59:59 GMT+0800")
as.Date(as.numeric(as.POSIXct(time1))*1000)
as.numeric(as.POSIXct(time1))*1000
as.numeric(as.POSIXct(time1))
as.numeric(as.POSIXct(time1), tz="Asia/Singapore")
time
time1
time1 <- paste(date, "00:00:00 UTC")
time2 <- paste(date, "23:59:59 UTC")
time1 <- paste(date, "00:00:00 UTC")
as.numeric(as.POSIXct(time1), tz="Asia/Singapore")
time1 <- paste(date, "00:00:00 GMT")
as.numeric(as.POSIXct(time1, tz="Asia/Singapore"))
as.numeric(as.POSIXct(time1, tz="Singapore"))
as.POSIXct(time1, tz="Singapore")
milisecond1 <- as.numeric(as.POSIXct(time1, tz="Asia/Singapore"))
milisecond2 <- as.numeric(as.POSIXct(time2, tz="Asia/Singapore"))
milisecond1
milisecond2
url <- paste("https://qlclp3roz7.execute-api.us-east-1.amazonaws.com/dev/getBetween/",milisecond1,"000&",milisecond2,"000")
url
url <- paste("https://qlclp3roz7.execute-api.us-east-1.amazonaws.com/dev/getBetween/",milisecond1,"000&",milisecond2,"000", sep="")
url <- paste("https://qlclp3roz7.execute-api.us-east-1.amazonaws.com/dev/getBetween/",milisecond1,"000&",milisecond2,"000", sep="")
url
shiny::runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Documents/IS415-Project')
runApp('Desktop/sparklean-dashboard/sparklean')
t=17607
as.Date(r)
as.Date(t)
as.POSIXct(t)
runApp('Desktop/sparklean-dashboard/sparklean')
as.Date(17604, origin="1970-01-01")
as.Date(17607, origin="1970-01-01")
runApp('Desktop/sparklean-dashboard/sparklean')
date=as.Date(17605, origin="1970-01-01")
date
date=as.Date("17605", origin="1970-01-01")
runApp('Desktop/sparklean-dashboard/sparklean')
as.numeric(as.POSIXct("2018-03-17 23:59:59 GMT", tz="Asia/Singapore"))
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
View(data1)
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
date <- Sy
date <- Sys.Date()
time1 <- paste(date, "00:00:00 GMT")
time2 <- paste(date, "23:59:59 GMT")
milisecond1 <- as.numeric(as.POSIXct(time1, tz="Asia/Singapore"))
milisecond2 <- as.numeric(as.POSIXct(time2, tz="Asia/Singapore"))
url <- paste("https://qlclp3roz7.execute-api.us-east-1.amazonaws.com/dev/getBetween/",milisecond1,"000&",milisecond2,"000", sep="")
data <- fromJSON(url)
data$time <- mdy_hms(data$time)
data$numOfUsage <- as.numeric(data$numOfUsage)
data <- data[order(data$time),]
data1 <- data[data[,"location"]=="SIS Level 2",]
data2 <- data[data[,"location"]=="SIS Level 4",]
y <- data2$numOfUsage
x <- as.character(data2$time)
m <- list(
l=50, r=50, t=50,b=200, pad=4
)
plot_ly(data1, x = ~x, y = ~y, type = 'scatter', mode = 'lines')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
View(data)
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
View(data1)
View(data2)
runApp('Desktop/sparklean-dashboard/sparklean')
View(data1)
runApp('Desktop/sparklean-dashboard/sparklean')
View(data2)
library(data.table)
setnames(data1,"usageId", "Usage ID")
View(data1)
View(data1)
setnames(data1,"usageId", "Usage ID")
setnames(data1,"usageId", "Usage ID")cat(date1, "\n")
setnames(data1,"usageId", "Usage ID")output$chart1 <- renderPlotly({
y <- data1$numOfUsage
x <- as.character(data1$time)
m <- list(
l=50, r=50, t=50,b=200, pad=4
)
plot_ly(data1, x = ~x, y = ~y, type = 'scatter', mode = 'lines')%>%
layout(title = "Real-Time Usage - Level2",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
})
runApp('Desktop/sparklean-dashboard/sparklean')
View(data1)
View(data2)
data1$time
describe
runApp('Desktop/sparklean-dashboard/sparklean')
View(data1)
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
shiny::runApp('Desktop/sparklean-dashboard/sparklean-old-copy')
shiny::runApp('Desktop/sparklean-dashboard/sparklean')
View(data3)
View(data)
View(data1)
View(data2)
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
View(data_l4)
library(jsonlite)
library(lubridate)
library(plotly)
library(data.table)
date <- Sys.Date()
time1 <- paste(date, "00:00:00 GMT")
time2 <- paste(date, "23:59:59 GMT")
milisecond1 <- as.numeric(as.POSIXct(time1, tz="Asia/Singapore"))
milisecond2 <- as.numeric(as.POSIXct(time2, tz="Asia/Singapore"))
url <- paste("https://qlclp3roz7.execute-api.us-east-1.amazonaws.com/dev/getBetween/",milisecond1,"000&",milisecond2,"000", sep="")
data <- fromJSON(url)
data$time <- mdy_hms(data$time)
data$numOfUsage <- as.numeric(data$numOfUsage)
data <- data[order(data$time),]
data1 <- data[data[,"location"]=="SIS Level 2",]
data2 <- data[data[,"location"]=="SIS Level 4",]
y <- data2$numOfUsage
x <- as.character(data2$time)
m <- list(
l=50, r=50, t=50,b=200, pad=4
)
colfunc <- colorRampPalette(c("blue", "red"))
pal <- colfunc(max(data2$numOfUsage))[data2$numOfUsage]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
pal
colfunc <- colorRampPalette(c("yellow", "red"))
pal <- colfunc(max(data2$numOfUsage))[data2$numOfUsage]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
colfunc
colfunc <- colorRampPalette(c("red", "yellow", "green"))
pal <- colfunc(max(data2$numOfUsage))[data2$numOfUsage]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
colfunc(max(data2$numOfUsage))[data2$numOfUsage]
colfunc(max(data2$numOfUsage))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
pal <- colfunc(0)[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
pal <- colfunc(1)[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
pal <- colfunc(10)[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
plot_ly(data2, x = ~x, y = ~y, color =  pal, type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
plot_ly(data2, x = ~x, y = ~y, color =  pal, type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
colfunc <- colorRampPalette(c("red", "yellow", "blue"))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
pal <- colfunc(length(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
colfunc <- colorRampPalette(c("red","blue"))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
plot_ly(data2, x = ~x, y = ~y, colorscale = "Greys", type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
plot_ly(data2, x = ~x, y = ~y, colors = colorRamp(c("red", "green")), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
data2 <- data[data[,"location"]=="SIS Level 2",]
y <- data2$numOfUsage
x <- as.character(data2$time)
m <- list(
l=50, r=50, t=50,b=200, pad=4
)
colfunc <- colorRampPalette(c("red","blue"))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
data2 <- data[data[,"location"]=="SIS Level 4",]
y <- data2$numOfUsage
x <- as.character(data2$time)
m <- list(
l=50, r=50, t=50,b=200, pad=4
)
colfunc <- colorRampPalette(c("red","blue"))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
length(pal)
length(y)
length(colfunc)
colfunc
pal
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
y <- data2$numOfUsage/2
x <- as.character(data2$time)
m <- list(
l=50, r=50, t=50,b=200, pad=4
)
colfunc <- colorRampPalette(c("red","blue"))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
max(y)
y
y <- data2$numOfUsage
x <- as.character(data2$time)
m <- list(
l=50, r=50, t=50,b=200, pad=4
)
colfunc <- colorRampPalette(c("red","blue"))
pal <- colfunc(max(y))[y]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
max(y)
colfunc(79)
colfunc(79)[31]
pal
len(y)
length(y)
marker = list(color =  pal)
marker
func <- colfunc(79)
p <- func[y]
p
length(y)
runApp('Desktop/sparklean-dashboard/sparklean')
for (f in func){}
l <- []
l <- c()
l
l[[1]]<-1
l
l[1]
l[2]<-2
l
l[[2]]
pal <- c()
i <- 1
for (usage in y){
pal[[i]]<-func(usage)
}
func <- colfunc(max(y))
pal <- c()
i <- 1
for (usage in y){
pal[[i]]<-func(usage)
}
for (usage in y){
pal[[i]]<-func[usage]
}
func
for (usage in y){
print(usage)
pal[[i]]<-func[usage]
}
y
func(y)
func[y]
func[38]
func[0]
colfunc <- colorRampPalette(c("red","yellow","blue"))
pal <- colfunc(max(y)+1)[y+1]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
colfunc <- colorRampPalette(c("blue","yellow","red"))
pal <- colfunc(max(y)+1)[y+1]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
colfunc <- colorRampPalette(c("green","yellow","red"))
pal <- colfunc(max(y)+1)[y+1]
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'))
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
View(data_l3)
runApp('Desktop/sparklean-dashboard/sparklean')
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'),
showlegend = TRUE)
plot_ly(data2, x = ~x, y = ~y, marker = list(color =  pal), type = 'bar')%>%
layout(title = "Real-Time Usage",margin = m,
yaxis = list(title = 'Number Of Usage'),
xaxis = list(title = 'Datetime'),
showscale = TRUE)
runApp('Desktop/sparklean-dashboard/sparklean')
runApp('Desktop/sparklean-dashboard/sparklean')
